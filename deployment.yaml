apiVersion: v1
kind: ConfigMap
metadata:
  name: merngraphql-config
data:
  PORT: "4000"
  NODE_ENV: "production"
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
type: Opaque
stringData:
  MONGO_URI: "mongodb+srv://Ganesh:root%40123@cluster0.pnuzrrg.mongodb.net/merngraphql?retryWrites=true&w=majority"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merngraphql-deployment
  labels:
    app: merngraphql
spec:
  replicas: 2
  selector:
    matchLabels:
      app: merngraphql
  template:
    metadata:
      labels:
        app: merngraphql
    spec:
      containers:
        - name: merngraphql
          image: my-node-app:latest
          ports:
            - containerPort: 4000
          env:
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: merngraphql-config
                  key: PORT
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: merngraphql-config
                  key: NODE_ENV
            - name: MONGO_URI
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: MONGO_URI
          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
          readinessProbe:
            httpGet:
              path: /graphql # Or your health check endpoint
              port: 4000
            initialDelaySeconds: 10
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: /graphql # Or your health check endpoint
              port: 4000
            initialDelaySeconds: 15
            periodSeconds: 20
---
apiVersion: v1
kind: Service
metadata:
  name: merngraphql-service
spec:
  selector:
    app: merngraphql
  ports:
    - protocol: TCP
      port: 80
      targetPort: 4000
  type: LoadBalancer
